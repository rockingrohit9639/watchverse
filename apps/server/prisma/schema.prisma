generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String
  password String

  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  files                File[]
  channels             Channel[]
  videosUploaded       Video[]
  playlists            Playlist[]
  channelSubscribed    Channel[]  @relation(name: "ChannelSubscribed", fields: [channelSubscribedIds], references: [id])
  channelSubscribedIds String[]   @db.ObjectId
  likedVideos          Like[]     @relation(name: "LikedVideos", fields: [likedVideoIds], references: [id])
  likedVideoIds        String[]   @db.ObjectId
  comments             Comment[]
  views                View[]     @relation(name: "ViewedBy", fields: [viewsIds], references: [id])
  viewsIds             String[]   @db.ObjectId
  picture              File?      @relation(name: "ProfilePicture", fields: [pictureId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pictureId            String?    @db.ObjectId

  @@map("users")
}

model File {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  originalName String
  encoding     String
  mimeType     String
  filename     String
  size         Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  uploadedBy         User       @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById       String     @db.ObjectId
  channelLogos       Channel[]  @relation(name: "ChannelLogo")
  channelBanners     Channel[]  @relation(name: "ChannelBanner")
  videos             Video[]    @relation(name: "Videos")
  videoThumbnails    Video[]    @relation(name: "VideoThumbnails")
  userWithProfiles   User[]     @relation(name: "ProfilePicture")
  playlistThumbnails Playlist[]

  @@map("files")
}

model Channel {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(false)

  createdBy     User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById   String     @db.ObjectId
  logo          File       @relation(fields: [logoId], references: [id], name: "ChannelLogo")
  logoId        String     @db.ObjectId
  banner        File?      @relation(fields: [bannerId], references: [id], name: "ChannelBanner")
  bannerId      String?    @db.ObjectId
  videos        Video[]
  playlists     Playlist[]
  subscribers   User[]     @relation("ChannelSubscribed", fields: [subscriberIds], references: [id])
  subscriberIds String[]   @db.ObjectId

  @@map("channels")
}

enum Visibility {
  PRIVATE
  PUBLIC
}

model Video {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  description String
  visibility  Visibility @default(PRIVATE)

  likes Int @default(0)
  views Int @default(0)

  video        File    @relation(name: "Videos", fields: [videoId], references: [id], onDelete: Cascade)
  videoId      String  @db.ObjectId
  uploadedBy   User    @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById String  @db.ObjectId
  channel      Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId    String  @db.ObjectId
  thumbnail    File    @relation(name: "VideoThumbnails", fields: [thumbnailId], references: [id])
  thumbnailId  String  @db.ObjectId

  playlists    Playlist[] @relation(fields: [playlistIds], references: [id])
  playlistIds  String[]   @db.ObjectId
  likeDocument Like?
  comments     Comment[]
  viewDocument View?
  tags         Tag[]      @relation(fields: [tagIds], references: [id])
  tagIds       String[]   @db.ObjectId

  @@map("videos")
}

model Tag {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  tag String

  videos   Video[]  @relation(fields: [videoIds], references: [id])
  videoIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  description String?
  visibility  Visibility @default(PRIVATE)

  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String   @db.ObjectId
  channel     Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   String   @db.ObjectId
  videos      Video[]  @relation(fields: [videoIds], references: [id])
  videoIds    String[] @db.ObjectId
  thumbnail   File     @relation(fields: [thumbnailId], references: [id])
  thumbnailId String   @db.ObjectId

  @@map("playlists")
}

// Each post will be having its single document to manage its likes
model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId    String   @unique @db.ObjectId
  likedBy    User[]   @relation(name: "LikedVideos", fields: [likedByIds], references: [id])
  likedByIds String[] @db.ObjectId

  @@map("likes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  video       Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     String @db.ObjectId
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String @db.ObjectId

  @@map("comments")
}

// Each post will be having its single document to manage its views
model View {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video       Video    @relation(fields: [videoId], references: [id])
  videoId     String   @unique @db.ObjectId
  viewedBy    User[]   @relation(name: "ViewedBy", fields: [viewedByIds], references: [id])
  viewedByIds String[] @db.ObjectId

  @@map("views")
}
